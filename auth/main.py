"""
–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–°–º–∞—Ä—Ç—á–∞—Å "Telegram Chat Bot Programming (advanced)"
"""

import logging
import asyncio

from database.models import TelegramUser


from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from tortoise import Tortoise


# —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
BOT_TOKEN = ''

# –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω –ø–æ —Å–º—Å
GENERATED_PASSWORD = 'qwerty'

# —Å–æ—Å—Ç–æ—è–Ω–∏—è
AWAIT_CONTACT = 'send contact'
AWAIT_PASSWORD = 'send password'

# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)


async def init_db():
    # Here we create a SQLite DB using file "database.sqlite3"
    #  also specify the app name of "models"
    #  which contain models from "app.models"
    await Tortoise.init(
        db_url='sqlite://db.sqlite',
        modules={'models': ['database.models']}
    )

    await Tortoise.generate_schemas()


loop = asyncio.get_event_loop()
loop.run_until_complete(init_db())


async def on_shutdown():
    await dp.storage.close()
    await dp.storage.wait_closed()
    await Tortoise.close_connections()


USER_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
USER_MENU.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True))

AUTHORIZED_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
AUTHORIZED_MENU.add(types.KeyboardButton('–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞'))


async def check_if_user_exist(phone_number):
    user = await TelegramUser.get_or_none(phone_number=phone_number)
    return user


async def check_if_authorized(message: types.Message):
    user = await TelegramUser.filter(user_id__contains=message.from_user.id, authorized=True)
    if user:
        return True
    else:
        return False


async def check_if_unauthorized(user_id):
    return not check_if_authorized(user_id)


@dp.message_handler(state='*', commands=['start'])
async def send_welcome(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.chat.id)
    await state.set_state(AWAIT_CONTACT)
    text = "–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    await bot.send_message(message.chat.id, text, reply_markup=USER_MENU)


@dp.message_handler(state=AWAIT_CONTACT, content_types=types.ContentTypes.CONTACT)
async def check_user_existence(message: types.Message):
    user_object = await check_if_user_exist(message.contact.phone_number)
    if user_object is not None:
        state = dp.current_state(chat=message.chat.id, user=message.chat.id)
        await state.set_state(AWAIT_PASSWORD)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –ø–æ —Å–º—Å')
    else:
        await bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler(state='*', commands=['clear'])
async def remove_menu_buttons(message: types.Message):
    await bot.send_message(message.chat.id, 'üëå', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=AWAIT_PASSWORD)
async def check_user_password(message: types.Message):
    if message.text == GENERATED_PASSWORD:
        user_object = await TelegramUser.get(user_id=message.from_user.id)
        user_object.authorized = True
        await user_object.save()

        # –∑–¥–µ—Å—å —É–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = dp.current_state(chat=message.chat.id, user=message.chat.id)
        await state.set_state('*')

        await bot.send_message(message.chat.id, '–¢—Å—Å—Å! –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é', reply_markup=AUTHORIZED_MENU)
    else:
        await bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å')


@dp.message_handler(check_if_authorized, commands=['menu'])
async def show_menu_authorized(message: types.Message):
    await bot.send_message(message.chat.id, '–¢—Å—Å—Å! –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é', reply_markup=AUTHORIZED_MENU)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
